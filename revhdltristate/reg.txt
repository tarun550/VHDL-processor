library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_signed.all;


entity regn is
    generic ( N:natural:=4); 
    Port ( regin : in  STD_LOGIC_VECTOR (N downto 0);
           regout : inout  STD_LOGIC_VECTOR (N downto 0);
           reset : in  bit;
           incr : in  bit;
           clk : in  bit;
	  load: in bit);
end regn;

architecture Behavioral of regn is


component dff 
	port ( q: inout std_logic;
         qbar: inout std_logic; 
         d: in std_logic;
         clk: in  bit;
         clr: in  bit;
	en: in bit
    	);
end component dff;

signal tempregout: std_logic_vector(N downto 0);

begin
  reg8:  for k in N downto 0 generate
    dffk: dff port map (tempregout(k),open, regin(k),clk,reset,load);
	end generate reg8; 

	process (incr,clk,reset)
	begin
	  if (reset = '1') then regout <= X"00" ;
	  else
	     if(clk'event and clk='1') then
	        if(incr = '1') then regout <= tempregout +1;
	        else regout <= tempregout;
	        end if;
             end if;
          end if;	
	end process;
end behavior;


-----TEST BENCH-------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
 
ENTITY regntb IS
generic (N:natural:=7);
END regntb;
 
ARCHITECTURE behavior OF regntb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT regn
	 generic (N: natural:=4);
    PORT(
         regin : IN  std_logic_vector(N downto 0);
         regout : inOUT  std_logic_vector(N downto 0);
         reset : IN  bit;
         incr : IN  bit;
         clk : IN  bit;
			load: in bit
        );
    END COMPONENT;
    

   --Inputs
   signal regin : std_logic_vector(N downto 0) := (others => '0');
   signal reset : bit := '0';
   signal incr : bit := '0';
   signal clk : bit := '0';
   signal load: bit := '0';

   --Outputs
   signal regout : std_logic_vector(N downto 0);

-----clock time period
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate DUT
   dut: regn generic map (7) PORT MAP (
          regin => regin,
          regout => regout,
          reset => reset,
          incr => incr,
          clk => clk,
	 load =>load
        );

   -- Clock process 
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stimulate: process
   begin		
		regin<= X"CE";
                reset <= '1';
		incr <='0';
		load <= '0';
		wait for 30 ns;
		reset <= '0';
                wait for 15 ns;
		load <= '1';
		wait for 15 ns;
		incr<='1';
		wait for 15 ns;
		load <= '0';
		regin <= X"12";
		wait for 15 ns;
		load <= '1';
		wait for 15 ns;
		 
   end process;

END;
